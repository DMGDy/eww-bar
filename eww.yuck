(defvar nix_menu_revealed false)
(defvar close_button false)
(defvar wifi_or_ssid false)
(defvar reveal_wifi false)
(defvar reveal_mem false)
(defvar reveal_batt false)
(defvar rev_all true)
(defvar nl "\n") 

(defpoll time-date :interval "1s"
	`/$HOME/.config/eww/bin/status --time`)

(defpoll time-date-icon :interval "1s"
	`$HOME/.config/eww/bin/status --time -i`)


(defpoll battery :interval "1s"
	`$HOME/.config/eww/bin/status --battery`)

(defpoll battery-icon :interval "1s"
	`$HOME/.config/eww/bin/status --battery -i`)

(defpoll battery-life :interval "1s"
  `$HOME/.config/eww/bin/status --battery -c`)


(defpoll wifi :interval "1s"
  `$HOME/.config/eww/statuses-rs/target/release/statuses-rs --wifi-info`)

(defpoll wifi-icon :interval "1s"
  `$HOME/.config/eww/statuses-rs/target/release/statuses-rs --wifi-strength`)

(defpoll ip :interval "1s"
  `$HOME/.config/eww/statuses-rs/target/release/statuses-rs --ip`)

(defpoll mem :interval "1s"
  `$HOME/.config/eww/statuses-rs/target/release/statuses-rs --mem`)

(defpoll cal :interval "360s"
  `cal | sed '$d'`)


(deflisten workspaces :initial "(box :class \"workspace-entry\"(button :class \"active\" :onclick \"$HOME/.config/eww/bin/workspaces 1\" \"1\"))"
  `/$HOME/.config/eww/bin/workspaces`)

(deflisten window_tabs :initial ""
  `$HOME/.config/eww/eww-windows/target/release/eww-windows`)

(deflisten window_titles :initial ""
  `$HOME/.config/eww/statuses-rs/target/release/statuses-rs --window-info`)


(defwidget nix-icon []
  (eventbox :onhover "${EWW_CMD} update nix_menu_revealed=true"
            :onhoverlost "${EWW_CMD} update nix_menu_revealed=false"
    (box :class "nix ${nix_menu_revealed ? 'expanded' : ''}"
         :orientation "h"
         :space-evenly false
      (button :class "nix-icon"
        :style "background-image: url('nix.png');"
      )
      (revealer :reveal nix_menu_revealed
              :transition "slideright"
        (box :class "nix-menu"
             :orientation "h"
             :space-evenly false
           :orientation "h" 
           :space-evenly false
          (button :class "hibernate"
                  :onclick "systemctl hibernate"
                  :tooltip "Hibernate with Swap"
            "⏾"
          )
          (button :class "reboot"
                  :onclick "reboot"
                  :tooltip "Reboot the Computer"
            "󰜉"
          )
          (button :class "poweroff"
                  :onclick "poweroff"
                  :tooltip "Turn off this machine"
            "⏻"
          )
        )
      ) 
    )
  )
)


(defwidget workspace []
  (literal
    :content "${workspaces}"
  )
)

(defwidget window-title []
   (literal
     :content "${window_titles}"
   )
)

(defwidget wifi []
  (box :class "wifi"
       :space-evenly false
    (button :class "wifi-icon"
            :onclick "eww update reveal_wifi=${!reveal_wifi}"
            :tooltip "${wifi}"
      "${wifi-icon}")
    (revealer :transition "slideright"
              :reveal {wifi_or_ssid && reveal_wifi}
              :duration "100ms"
      (button :class "wifi-data"
              :onclick "eww update wifi_or_ssid=${!wifi_or_ssid}"
        "${wifi}"))
    (revealer :transition "slideleft"
              :reveal {!wifi_or_ssid && reveal_wifi}
              :duration "100ms"
      (button :class "wifi-data"
              :onclick "eww update wifi_or_ssid=${!wifi_or_ssid}"
        "${ip}"
      )
    )
  )
)

(defwidget battery []
  (box :class "battery"
       :space-evenly false
    (button :class "battery-icon" 
            :tooltip "${battery} 
${battery-life}"
            :onclick "eww update reveal_batt=${!reveal_batt}"
      "${battery-icon}"
    )
    (revealer
      :transition "slideright"
      :reveal reveal_batt
      :duration "100ms"
      (button :class "battery-data"
        "${battery}"
      )
    )
    (revealer
      :transition "slideleft"
      :reveal {!reveal_batt}
    )
  )
)

(defwidget time-date []
  (box :class "time-date"
       :space-evenly false
       :tooltip "${cal}"
    (button :class "time-date-data" 
      "${time-date}"
    )
  )
)

(defwidget mem[]
  (box :class "mem"
       :space-evenly false
    (button :class "mem-icon"
            :tooltip "${mem}"
            :onclick "eww update reveal_mem=${!reveal_mem}"
    ""
    )
    (revealer :transition "slideleft"
              :reveal reveal_mem
              :duration "100ms"
      (button :class "mem-data"
      "${mem}"
      )
    )
    (revealer :transition "slideright"
              :reveal {!reveal_mem}
              :duration "100ms"
    )
  )
)

(defwidget reveal-arrow []
  (box :class "revealer"
    :space-evenly false 
    (revealer :transition "slideleft"
              :reveal rev_all
              :duration "10ms"
      (button :class "reveal-all-button"
              :tooltip "reveal all"
              :onclick "eww update reveal_mem=true;
              eww update reveal_batt=true;
              eww update reveal_wifi=true;
              eww update rev_all=false"
              "󰬧"
      )
    )
    (revealer :transition "slideright"
              :reveal {!rev_all}
              :duration "10ms"
      (button :class "reveal-all-button"
              :tooltip "hide all"
              :onclick "eww update reveal_mem=false;
              eww update reveal_batt=false;
              eww update reveal_wifi=false;
              eww update rev_all=true"
              "󰬭"
      )
    )
  )
)

(defwidget window-tabs []
  (literal 
    :content "${window_tabs}")
)

(defwidget status-widgets []
  (box :class "status-widgets"
       :halign "end"
       :space-evenly false
    (eventbox :cursor "pointer"
      (reveal-arrow)
    )
    (wifi)
    (mem)
    (battery)
    (time-date)
  )
)

(defwindow bar
  :monitor 0
  :stacking "fg"
  :windowtype "dock"
  :geometry
  (geometry
    :width "100%"
    :height "0%"
    :anchor "top center"
  )
    :exclusive true
  (box :class "main-container"
       :space-evenly false
    (box 
       :halign "start"
       :space-evenly false 
       (nix-icon)
       (workspace)
       (window-tabs))
       (box :halign "end"
            :hexpand true
       (status-widgets)
    )
  )
)
       
